<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>deploy on Hugo ハンズオン</title><link>/hugo-hands-on/tags/deploy/</link><description>Recent content in deploy on Hugo ハンズオン</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 05 Feb 2024 00:48:47 +0900</lastBuildDate><atom:link href="/hugo-hands-on/tags/deploy/index.xml" rel="self" type="application/rss+xml"/><item><title>GitHub Actions で Hugo の成果物をデプロイする</title><link>/hugo-hands-on/deploy-by-github-actions/</link><pubDate>Mon, 05 Feb 2024 00:48:47 +0900</pubDate><guid>/hugo-hands-on/deploy-by-github-actions/</guid><description>このハンズオン資料は GitHub Pages 上で公開されています。そして、リポジトリに変更を push すると、Hugo のコンテンツをビルドして自動的に GitHub Pages にデプロイします。
その自動デプロイを行っているのが GitHub Actions になります。
Hugo をデプロイするためのカスタムアクション リポジトリの .github/workflows/ 配下に GitHub Actions のワークフローファイルを作成します。そのワークフローファイルに Hugo のインストール、ビルド、GitHub Pages へのデプロイを自分で実装することもできますが、すでにサードパーティのカスタムアクションがあるのでそれを使った方が簡単でよいでしょう。
peaceiris/actions-hugo がデプロイのためのカスタムアクションです。基本的には README にあるワークフローファイルの設定をすればよいです。
このハンズオン資料のワークフローファイルは .github/workflows/gh-pages.yml になります。これを参考にしながら設定してみてください。GitHub Actions の設定が正しいかどうかは実際に実行してみないとわかりません。慣れないうちはエラーになることも多いです。諦めずに何度もトライ&amp;amp;エラーを繰り返して設定しましょう。一度設定したら、そうそう変更することはなく、その後は自動デプロイしてくれるのでコンテンツの編集と公開が一元管理できます。
gh-pages ブランチの作成 GitHub Pages へデプロイするためのブランチを gh-pages という名前で作ります。いまは任意のブランチ名を作ることもできますが、ひとまずこの名前で作ります。クリーンな gh-pages ブランチを作る方法が次の gist で紹介されています。同じようにやってみてください。
ワークフローに書き込み権限を与える デプロイのための GitHub Actions のワークフロー内では gh-pages ブランチへ push します。これをできるようにするにはワークフローに書き込み権限を与える必要があります。いくつか方法があります。
1つは GitHub のリポジトリの設定画面 (settings/actions の General ページ) から Workflow permissions に write permissions がある選択肢に変更して設定を保存します。
もう1つはワークフローファイル (このハンズオン資料では .</description></item></channel></rss>