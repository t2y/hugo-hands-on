<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>github on Hugo ハンズオン</title><link>/hugo-hands-on/tags/github/</link><description>Recent content in github on Hugo ハンズオン</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sat, 10 Feb 2024 08:26:52 +0900</lastBuildDate><atom:link href="/hugo-hands-on/tags/github/index.xml" rel="self" type="application/rss+xml"/><item><title>Github Pages を使う</title><link>/hugo-hands-on/use-github-pages/</link><pubDate>Sat, 10 Feb 2024 08:26:52 +0900</pubDate><guid>/hugo-hands-on/use-github-pages/</guid><description>このハンズオン資料は GitHub Pages 上で公開されています。
GitHub Pages とは GitHub 社が提供する静的なサイトホスティングサービスです。GitHub のアカウントをもっていれば少し設定すれば無料で使えます。GitHub Pages というサービスを使って、このハンズオン資料をインターネット上に公開しています。
GitHub Pages のクイックスタート をみて環境構築をやってみてください。
リファレンス GitHub Pages のドキュメント</description></item><item><title>GitHub Actions で Hugo の成果物をデプロイする</title><link>/hugo-hands-on/deploy-by-github-actions/</link><pubDate>Mon, 05 Feb 2024 00:48:47 +0900</pubDate><guid>/hugo-hands-on/deploy-by-github-actions/</guid><description>このハンズオン資料は GitHub Pages 上で公開されています。そして、リポジトリに変更を push すると、Hugo のコンテンツをビルドして自動的に GitHub Pages にデプロイします。
その自動デプロイを行っているのが GitHub Actions になります。
Hugo をデプロイするためのカスタムアクション リポジトリの .github/workflows/ 配下に GitHub Actions のワークフローファイルを作成します。そのワークフローファイルに Hugo のインストール、ビルド、GitHub Pages へのデプロイを自分で実装することもできますが、すでにサードパーティのカスタムアクションがあるのでそれを使った方が簡単でよいでしょう。
次の2つのカスタムアクションを使います。基本的にはリポジトリの README を参照してワークフローファイルを設定すればよいです。
peaceiris/actions-hugo ジョブ環境に Hugo をインストールするためのカスタムアクション peaceiris/actions-gh-pages Hugo の成果物を gh-pages ブランチに push するためのカスタムアクション このハンズオン資料のワークフローファイルは .github/workflows/gh-pages.yml になります。このファイルを参考にしながら設定してみてください。やっていることは次の4つです。
hugo-hands-on リポジトリをクローンする 指定したバージョンの Hugo をインストールする インストールした Hugo でリポジトリのコンテンツを 本番環境向けにビルド する ビルドした成果物を gh-pages ブランチに push する (GitHub Pages へのデプロイをトリガー) GitHub Actions の設定が正しいかどうかは実際に実行してみないとわかりません。設定に慣れないうちはエラーになることが多いでしょう。諦めずに何度もトライ&amp;amp;エラーを繰り返して設定しましょう。一度設定したら、そうそう変更することはなく、その後は自動デプロイしてくれるのでコンテンツの編集と公開を同期できます。
gh-pages ブランチの作成 GitHub Pages へデプロイするためのブランチを gh-pages という名前で作ります。いまは任意のブランチ名で作ることもできますが、ひとまずこの名前で作ります。クリーンな gh-pages ブランチを作る方法が次の gist で紹介されています。同じようにやってみてください。</description></item></channel></rss>