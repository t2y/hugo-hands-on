<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hugo on Hugo ハンズオン</title><link>/hugo-hands-on/tags/hugo/</link><description>Recent content in hugo on Hugo ハンズオン</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sun, 14 Jan 2024 16:51:21 +0900</lastBuildDate><atom:link href="/hugo-hands-on/tags/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>コンテンツをビルドする</title><link>/hugo-hands-on/build-content/</link><pubDate>Sun, 14 Jan 2024 16:51:21 +0900</pubDate><guid>/hugo-hands-on/build-content/</guid><description>Hugo のインストール を完了したらこのハンズオン資料のリポジトリを使ってビルドしてみましょう。
リポジトリのクローン git コマンドを使って次のリポジトリをクローンします。
$ git clone https://github.com/t2y/hugo-hands-on.git ./repo $ cd repo $ git submodule update --init リポジトリ配下の hugo-hands-on ディレクトリに移動します。
$ ls LICENSE README.md hugo-hands-on $ cd hugo-hands-on $ ls archetypes content hugo.toml static themes 開発サーバーの起動 hugo の開発サーバーを起動します。hugo-hands-on ディレクトリで実行するのに注意してください。
$ hugo server port 1313 already in use, attempting to use an available port Watching for changes in path/to/repo/hugo-hands-on/{archetypes,content,static,themes} Watching for config changes in path/to/repo/hugo-hands-on/hugo.toml Start building sites … hugo v0.</description></item><item><title>新規サイトの構築</title><link>/hugo-hands-on/new-site/</link><pubDate>Sun, 14 Jan 2024 14:21:23 +0900</pubDate><guid>/hugo-hands-on/new-site/</guid><description>ここでは一から自分のサイトを作ってみましょう。
サイトの雛形を生成 mysite というディレクトリ配下にサイトに必要なファイル群を作成していきます。
$ hugo new site mysite Congratulations! Your new Hugo site was created in path/to/mysite. Just a few more steps... 1. Change the current directory to path/to/mysite. 2. Create or install a theme: - Create a new theme with the command &amp;#34;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;#34; - Install a theme from https://themes.gohugo.io/ 3. Edit hugo.toml, setting the &amp;#34;theme&amp;#34; property to the theme name. 4. Create new content with the command &amp;#34;hugo new content &amp;lt;SECTIONNAME&amp;gt;/&amp;lt;FILENAME&amp;gt;.</description></item><item><title>Hugo とは</title><link>/hugo-hands-on/what-is-hugo/</link><pubDate>Sun, 14 Jan 2024 10:49:01 +0900</pubDate><guid>/hugo-hands-on/what-is-hugo/</guid><description>Hugo の概要について簡単に紹介します。
静的サイトと動的サイト Hugo は Go 言語で実装された高速な静的サイトジェネレーターです。ここでいう「静的」というのはビルド時に Web サイトのコンテンツをすべて作成することを指します。そしてビルドしたコンテンツを Web サーバーにデプロイします。ブラウザでサイトを訪問したときにあらかじめ作成済みのコンテンツをそのまま返すようなサイトになります。
「静的」という概念に対して「動的」な Web サイトがあります。この種のサイトはブラウザで訪問したときに Web サーバー (アプリケーションサーバー) が裏方でプログラムを実行して、リクエストされたタイミングでコンテンツを生成して返すようなサイトを指します。一般的に静的サイトジェネレーターと対照的にみられるシステムに コンテンツマネジメントシステム (CMS) があります。WordPress が CMS の代表的なシステムです。
静的サイトのメリット・デメリット 静的サイトと動的サイトは用途や役割に応じて使い分けるとよいでしょう。どちらが優れているというわけではありません。例えば、静的サイトは動的サイトと比べて次のメリットがあります。
Web サイトのパフォーマンスがよい 低スペックのサーバーで運用できる ブラウザで訪問したユーザーの体験がよくなる Web サイトの構築やデプロイ作業が簡単にできる アプリケーションサーバーやデータベースといった依存するモジュールが少ないため システム全体をシンプルにできる セキュリティを維持する上で優位となる もちろんデメリットもあります。
(相対的に) 動的サイトと比べて高度な機能を実現するのが難しい ユーザー管理や買いものをするときのカート機能など、データベースを使うような機能はできない 動的サイトはブラウザ上で設定や拡張ができるのに対して、静的サイトはカスタマイズがテキストベースの UI になる このメリット・デメリットは一例ですが、提供したい Web サイトの特性に応じて使い分けるとよいでしょう。
Hugo の人気 さて、Hugo はこういった静的サイトを構築するためのツールです。2013年に最初のリリースが行われて以降、いまも活発に開発されています。とても人気のあるツールで多くの利用者がいて、十分に成熟したツールと言えます。また Hugo のテーマは Hugo Themes で公開されており、これらのテーマを選択することで外観を簡単にカスタマイズできます。こういったテーマを開発している有志が多いことも Hugo の人気が高いことを測る指標の1つです。Hugo は、ブログ、企業サイト、ポートフォリオサイト、ドキュメンテーション、単一のランディングページなどでもよく使われています。
リファレンス What is Hugo 静的サイトジェネレーターとは？ 静的サイトジェネレータ「Hugo」と技術文書公開向けテーマ「Docsy」でOSSサイトを作る</description></item><item><title>Hugo をインストールする</title><link>/hugo-hands-on/install-hugo/</link><pubDate>Sat, 13 Jan 2024 23:53:58 +0900</pubDate><guid>/hugo-hands-on/install-hugo/</guid><description>Hugo をインストールします。
2種類の Hugo バイナリ Hugo には標準版 (standard edition) と拡張版 (extended edition) の2種類があります。拡張版には次の機能が追加されています。
画像処理時に WebP 形式 にエンコードできる 組み込みの LibSass トランスパイラを使って Sass を CSS にトランスパイルできる どちらを選択すればよいか、よくわからないときは 拡張版 (extended edition) のインストールをお奨めします。というのは、選択したテーマによっては Sass を使っていてビルドするときに拡張版を要求するときがあるからです。
マルチプラットフォーム対応 Hugo はマルチプラットフォーム向けにインストール手段が提供されています。お使いのオペレーティングシステムにあわせて次のドキュメントを参照してインストールしてください。
Installation 多くの環境向けにツールのバイナリファイル (コマンド) が提供されているため、インストールはすぐに完了するでしょう。
インストールが完了したらターミナルでコマンドを実行してバージョンを表示してみましょう。
$ hugo version hugo v0.121.2+extended linux/amd64 BuildDate=unknown バージョンに +extended とついているのは拡張版をインストールしたからです。
高度な設定: Hugo をコンパイルインストール 前節でバイナリをインストールした方はこの作業を行う必要はありません
プログラマーの方で自分のマシンに Go 言語 のコンパイラをインストールしている方は最新バージョンをコンパイルしてインストールすることもできます。
Build from source Git, Go, GCC (または Clang) が必要 $ CGO_ENABLED=1 go install -tags extended github.</description></item></channel></rss>